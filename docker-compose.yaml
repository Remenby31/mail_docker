version: '3.8'

services:
  email-fetcher:
    container_name: email-fetcher
    build: 
      context: ./email-fetcher
      dockerfile: Dockerfile
    environment:
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - IMAP_SERVER=${IMAP_SERVER}
      - IMAP_PORT=${IMAP_PORT}
      - FETCH_INTERVAL=${FETCH_INTERVAL}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      chroma:
        condition: service_started
    restart: unless-stopped

  db:
    container_name: db
    image: postgres:14-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  chroma:
    container_name: chroma
    image: chromadb/chroma:latest
    environment:
      - ALLOW_RESET=true
      - ANONYMIZED_TELEMETRY=false
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  chroma_data: